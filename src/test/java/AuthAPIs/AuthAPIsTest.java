package AuthAPIs;

import io.restassured.RestAssured;
import org.testng.annotations.Test;

import static org.hamcrest.Matchers.equalTo;

public class AuthAPIsTest {

    //basic
    //preemptive
    //digestive
    //form
    //Oauth1
    //Oauth2
    //JWT

    //Bearer is just an identifier it can be used with JWT or any other authentication

    //basic auth: username and password
    //username and password will be converted into encoded string anr then it will be given to server
    // encoded base64 string will generated by(btoa method) and it will be given to server
    // (atob method) will decode the encypted Strinng on server side

    @Test
    public void basicAuthTest() {
        RestAssured.baseURI = "https://the-internet.herokuapp.com";

        RestAssured.given().log().all()
                .auth()
                .basic("admin", "admin")
                .when().log().all()
                .get("/basic_auth")
                .then().log().all()
                .assertThat()
                .statusCode(200);
    }

    // Older way of providing authentication
    //Less secured to compared to basicAuth and almost depricated
    //username and password will be exposed over the network
    @Test
    public void preemptiveAuthTest() {
        RestAssured.baseURI = "https://the-internet.herokuapp.com";

        RestAssured.given().log().all()
                .auth()
                .preemptive()
                .basic("admin", "admin")
                .when().log().all()
                .get("/basic_auth")
                .then().log().all()
                .assertThat()
                .statusCode(200);
    }

    //More secure than basic auth
    //Client is sending request to server and not passing any other info with request
    // Then immediately server will give you 401 Unauthorized to access particular resource/api + Along with that server will give you other information in the form of header , refer below headers
    //WWW-Authenticate: Digest realm="RealmOfBadri,qop="auth",nonce=''dcd98b7102dd2f0e8b11d0f6000b0c093
    // so 4/5 attributes server will send to client along with 402 unauthorized
    // So then we again need to send request along with the extra information which server has provided
    //So now server will check for the information which he has provided earlier , the same information client has passed along with the request or not
    // So with every request client need to pass the information which server has provided
    //first time server will always reject the request and will send header to client
    // We don't need to worry abount 401 unauthorized , it will be taken care by postman and rest assured automatically
    //Remember the header name is : WWW-Authenticate

    //postman instruction in "digestive Auth-By default, Postman will extract values from the received response, add it to the request, and retry it. Do you want to disable this?"
    @Test
    public void digestiveAuthTest() {
        RestAssured.baseURI = "https://postman-echo.com/";

        RestAssured.given().log().all()
                .auth()
                .digest("postman", "password")
                .when().log().all()
                .get("/digest-auth")
                .then().log().all()
                .assertThat()
                .statusCode(200)
                .and()
                .body("authenticated",equalTo(true));
    }
}